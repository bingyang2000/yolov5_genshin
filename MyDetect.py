# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QMessageBox
import sys, gui

import detect, time
import win32gui


def get_visible_windows():
    # 定义一个回调函数来枚举所有可见窗口
    def enum_windows_callback(hwnd, visible_windows):
        if win32gui.IsWindowVisible(hwnd):
            visible_windows.append(hwnd)
        return True

    # 枚举所有可见窗口
    visible_windows = []
    win32gui.EnumWindows(enum_windows_callback, visible_windows)

    return visible_windows


def get_genshin_location():
    for hwnd in get_visible_windows():
        window_title = win32gui.GetWindowText(hwnd)
        if window_title == '原神':
            left, top, right, bottom = win32gui.GetWindowRect(hwnd)
            return left, top, right, bottom

    return 0, 0, 0, 0


class MainW(QMainWindow, gui.Ui_MainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        gui.Ui_MainWindow.__init__(self)
        self.setupUi(self)
        self.weight = r"D:\project\DeepStudy\yolov5\runs\train\200_16_ASFF\weights\best.pt"
        self.data = r"D:\project\DeepStudy\yolov5\models\config\data.yaml"
        self.isStart = False
        self.view_img = True
        self.path_img = ""
        self.device = "0"
        self.pushButton.clicked.connect(self.getFileDir)
        self.pushButton_2.clicked.connect(self.screen)
        self.pushButton_3.clicked.connect(self.getWeightDir)
        self.pushButton_4.clicked.connect(self.getDataDir)
        self.pushButton_5.clicked.connect(self.start)
        self.ld.setText(self.data)
        self.lwe.setText(self.weight)

    def getFileDir(self):
        filternames = '图片视频文件(*.mp4 *.jpg *.png);;ALL(*.*)'
        # 输入文件路径
        path_img, _ = QFileDialog.getOpenFileName(self.centralwidget, '打开文件', './', filternames)
        if path_img != '':
            self.path_img = path_img
            # 显示图像
            self.view_img = False
            self.lf.setText(self.path_img)

    def getDataDir(self):
        filternames = '数据集文件(*.yaml)'
        # 数据集文件路径
        data, _ = QFileDialog.getOpenFileName(self.centralwidget, '打开文件', './', filternames)
        if data != '':
            self.data = data
            self.ld.setText(self.data)

    def getWeightDir(self):
        filternames = '权重文件(*.pt);;ALL(*.*)'
        # 权重文件路径
        weight, _ = QFileDialog.getOpenFileName(self.centralwidget, '打开文件', './', filternames)
        if weight != '':
            self.weight = weight
            self.lwe.setText(self.weight)

    def screen(self):
        # 屏幕位置
        # 左上角，右下角
        x0, y0, x1, y1 = get_genshin_location()

        x = str(x0)
        y = y0 + y1 - 540

        if y < 0:
            print("false")
            self.close()
        y = str(y)
        self.path_img = f"screen 0 {x} {y} 960 540"

        # 显示图像
        self.lx.setText(x)
        self.ly.setText(y)
        self.lwi.setText("960")
        self.lh.setText("540")
        self.view_img = True

    def start(self):
        if self.isStart:
            QMessageBox.warning(self, "警告", '推理进行中！', QMessageBox.Ok)
        elif self.path_img == "":
            QMessageBox.warning(self, "警告", '未选择输入方式', QMessageBox.Ok)
        else:
            self.isStart = True
            self.device = self.cd.currentText()
            save_dir = detect.run(source=self.path_img, view_img=self.view_img, data=self.data, weights=self.weight,
                                  device=self.device)
            result = save_dir.split('\n')[1].split(' ')[-1][:-7]
            QMessageBox.information(self, '完成', "Result saved to " + result)
            self.path_img = ''
            self.lf.setText(self.path_img)
            self.isStart = False


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    md = MainW()
    md.show()
    app.exec_()
